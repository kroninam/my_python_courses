# Модель кодирования RGB (с канала: egoroff_channel)
#
# Одним из способов кодирования цвета является метод RGB. В нём каждый цвет кодируется значениями базовых цветов:
# Red (красный), Green (зелёный) и Blue (голубой). Это три оси цвета, которые имеют градацию значений от 0 до 255.
# Если все три значения сделать нулевыми, то получится чёрный цвет, а если 255 — белый.
#
# Каждый цвет в модели RGB записывается следующим образом:
#
# #RRGGBB
# Данный код состоит из:
#
# символа решетки, который стоит впереди;
# потом идут два символа R - код оттенка красного цвета в шестнадцатеричной системе
# потом идут два символа G - код оттенка зеленого цвета в шестнадцатеричной системе
# потом идут два символа B - код оттенка синего цвета в шестнадцатеричной системе
# Для перевода в шестнадцатеричную систему можете воспользоваться онлайн-калькулятором или фунцией hex в python.
#
# Например, возьмем код #43ABF0. Раскладываем это значение на три цвета:
#
# за красный цвет отвечают первые два символа после решетки - 43. Это число записано в шестнадцатеричной системе.
# 4316 = 6710
# за зеленый цвет отвечают следующие два символы AB. Переводим в десятиричную систему:  AB16 = 17110
# за синий отвечают последние два символа F0. Переводим в десятиричную систему:  F016 = 24010
# Получаем что за кодом #43ABF0 стоит 67-й оттенок красного, 171-й оттенок зеленого и 240-й оттенок синего.
# Можно это вкратце записать как RGB(67, 171, 240).

# Кортеж HEX в RGB:
tuple(bytes.fromhex('61559a'))
# (97, 85, 154)

# Кортеж RGB в HEX:
bytes((97, 85, 154)).hex()
# '61559a'

# Задача с канала egoroff_channel:
#
# Ваша задача создать функцию from_hex_to_rgb, которая принимает на вход строку -
# закодированный код цвета в формате RGB и возвращает кортеж из трех значений
# (оттенок_красного, оттенок_зеленого, оттенок_синего). Вот посмотрите примеры:
#
# from_hex_to_rgb(#000000) => (0, 0, 0)
# from_hex_to_rgb(#FFFFFF) => (255, 255, 255)
# from_hex_to_rgb(#FF0000) => (255,0, 0)
# from_hex_to_rgb(#00FF00) => (0,255, 0)
# from_hex_to_rgb(#0000FF) => (0,0,255)
# from_hex_to_rgb(#FFFFFF) => (255,255,255)
# from_hex_to_rgb(#87CEEB) => (135,206,235)
# from_hex_to_rgb(#87CEFA) => (135,206,250)
# from_hex_to_rgb(#191970) => (25,25,112)
# Как только функция будет готова, ее необходимо применить ко всем элементам
# списка colors при помощи функции map. Ниже уже имеется готовый список colors
# и цикл обхода результата функции map. Добавьте только название функции внутри
# вызова map, все остальное код сделает за вас.

def from_hex_to_rgb(color: str) -> tuple:
    color = color.lstrip('#')
    return tuple(bytes.fromhex(color))


colors = ['#B22222', '#DC143C', '#FF0000', '#FF6347', '#FF7F50', '#CD5C5C', '#F08080', '#E9967A',
          '#FA8072', '#FFA07A', '#FF4500', '#FF8C00', '#FFA500', '#FFD700', '#B8860B', '#DAA520',
          '#EEE8AA', '#BDB76B', '#F0E68C', '#808000', '#FFFF00', '#9ACD32', '#556B2F', '#6B8E23',
          '#7CFC00', '#7FFF00', '#ADFF2F']

for red, green, blue in map(from_hex_to_rgb, colors):
    print(f"Red={red}, Green={green}, Blue={blue}")